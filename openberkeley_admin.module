<?php
/**
 * @file
 * Code for the Open Berkeley Admin feature.
 */

include_once 'openberkeley_admin.features.inc';
/**
 * Implements hook_menu().
 */
function openberkeley_admin_menu() {

  $items = array();

  $items['admin/config/openberkeley'] = array(
    'title' => 'Open Berkeley',
    'description' => 'Configure Open Berkeley settings.',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/openberkeley/spotlight'] = array(
    'title' => 'Spotlight Settings',
    'description' => 'Configure Spotlight settings.',
    'position' => 'left',
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panopoly_widgets_configure_form'),
    'access arguments' => array('administer spotlight settings'),
  );
  $items['admin/dashboard/openberkeley'] = array(
    'title' => 'Open Berkeley',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure Open Berkeley settings.',
    'position' => 'left',
    'page callback' => 'openberkeley_admin_openberkeley_settings_page',
    'access arguments' => array('administer openberkeley settings'),
    'file' => 'openberkeley_admin.admin.inc',
    'file path' => drupal_get_path('module', 'openberkeley_admin'),
  );

  node_type_cache_reset();
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    // Attempt to order the comment page items at the top
    $weight = 0;
    if ($type_url_str == 'openberkeley-content-page') {
      $weight = -10;
    }
    if ($type_url_str == 'openberkeley-landing-page') {
      $weight = -8;
    }
    $items['admin/dashboard/content/' . $type_url_str] = array(
      'title' => 'Add ' . $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'node_add',
      'page arguments' => array($type->type),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'description' => $type->description,
      'file' => 'node.pages.inc',
      'file path' => drupal_get_path('module', 'node'),
      'weight' => $weight,
    );
  }

  $items['admin/dashboard/content/add'] = array(
    'title' => 'Add content',
    'page callback' => 'openberkeley_admin_node_add_page',
    'access callback' => '_node_add_access',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'admin/dashboard/content',
    'file' => 'openberkeley_admin.admin.inc',
    'file path' => drupal_get_path('module', 'openberkeley_admin'),
  );

  return $items;
}

function openberkeley_admin_admin_menu_output_alter(&$content) {
  // Check if index menu is defined in $content and is array
  if (!isset($content['menu']) || !is_array($content['menu'])) {
    return;
  }
  if ((array_key_exists('admin/dashboard', $content['menu'])) &&
    (array_key_exists('admin/dashboard/content', $content['menu']['admin/dashboard'])) &&
    (array_key_exists('admin/dashboard/content/add', $content['menu']['admin/dashboard']['admin/dashboard/content']))
  ) {
    unset($content['menu']['admin/dashboard']['admin/dashboard/content']['admin/dashboard/content/add']);
  }
}

/**
 * Implements hook_menu_alter().
 */
function openberkeley_admin_menu_alter(&$items) {
  $items['admin/content']['access callback'] = 'openberkeley_admin_menu_role_access';
  $items['node/add']['access callback'] = 'openberkeley_admin_menu_role_access';
  // order common page items at top
  $items['node/add/openberkeley-content-page']['weight'] = -10;
  $items['node/add/openberkeley-landing-page']['weight'] = -8;
}

function openberkeley_admin_menu_role_access() {
  global $user;
  $blacklist_roles = array('contributor', 'editor', 'builder');
  $user_roles = array_values($user->roles);
  if (count(array_intersect($user_roles, $blacklist_roles))) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 *
 * Adds permissions for access to Open Berkeley administration functionality
 */
function openberkeley_admin_permission() {
  return array(
    'administer openberkeley settings' => array(
      'title' => t('Administer Open Berkeley Settings'),
      'description' => t('See the Open Berkeley tab on the Total Control dashboard.'),
    ),
    'administer spotlight settings' => array(
      'title' => t('Administer Spotlight Settings'),
      'description' => t('See the Spotlight link under the Open Berkeley tab on the Total Control dashboard.'),
    ),
    'access dashboard create content' => array(
      'title' => t('Access Dashboard Create Content pane'),
      'description' => t('See the Create Content pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard content overview' => array(
      'title' => t('Access dashboard Content Overview pane'),
      'description' => t('See the Content Overview pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard new user accounts' => array(
      'title' => t('Access dashboard New User Accounts pane'),
      'description' => t('See the New User Accounts pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard new content' => array(
      'title' => t('Access dashboard New Content pane'),
      'description' => t('See the New Content pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard unpublished content' => array(
      'title' => t('Access dashboard Unpublished Content pane'),
      'description' => t('See the Unpublished Content pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard administer menus' => array(
      'title' => t('Access dashboard Administer Menus pane'),
      'description' => t('See the Administer Menus pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard administer taxonomy' => array(
      'title' => t('Access dashboard Administer Taxonomy pane'),
      'description' => t('See the Administer Taxonomy pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard url administration' => array(
      'title' => t('Access dashboard URL Administration pane'),
      'description' => t('See the URL Administration pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard other administration' => array(
      'title' => t('Access dashboard Other Administration pane'),
      'description' => t('See the Other Administration pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard backups' => array(
      'title' => t('Access dashboard Backups pane'),
      'description' => t('See the Backups pane under the Dashbaord tab on the Total Control dashboard.'),
    ),
    'access dashboard content tab' => array(
      'title' => t('Access dashboard Content tab'),
      'description' => t('See the Content tab on the Total Control dashboard.'),
    ),
    'access dashboard categories tab' => array(
      'title' => t('Access dashboard Categories tab'),
      'description' => t('See the Categories tab on the Total Control dashboard.'),
    ),
    'access dashboard user accounts tab' => array(
      'title' => t('Access dashboard User Accounts tab'),
      'description' => t('See the User Accounts tab on the Total Control dashboard.'),
    ),
    'access dashboard files tab' => array(
      'title' => t('Access dashboard Files tab'),
      'description' => t('See the Files tab on the Total Control dashboard.'),
    ),
  );
}

/**
 * Implementation of hook_form_alter
 *
 */
function openberkeley_admin_form_alter(&$form, &$form_state, $form_id) {
  $pantheon_description = "<em>Backups for Pantheon-hosted sites must be downloaded, they cannot be saved to the server.</em>";
  switch ($form_id) {
    case "views_form_control_users_page_1":
      if (!isset($form['add_roles']) || (!isset($form['remove_roles']))) {
        break;
      }
      $admin_rid = variable_get('user_admin_role');
      $roles = user_roles();
      $admin_rolename = NULL;
      if ((!is_array($roles)) || (!array_key_exists($admin_rid, $roles))) {
        drupal_set_message("Roles may be misconfigured. Possible security implications. Ask your administrator to check on this.", "warning");
      }
      else {
        $admin_rolename = $roles[$admin_rid];
      }

      while (list($k, $v) = each($form['add_roles']['#options'])) {
        if ($v == $admin_rolename) {
          unset($form['add_roles']['#options'][$k]);
        }
      }
      while (list($k, $v) = each($form['remove_roles']['#options'])) {
        if ($v == $admin_rolename) {
          unset($form['remove_roles']['#options'][$k]);
        }
      }
      break;
    case "panopoly_widgets_configure_form":
      $form['panopoly_widgets_spotlight_rotation_time']['#default_value'] = 5;
      $form['panopoly_widgets_spotlight_pause_play_buttons']['#access'] = FALSE;
      break;
    case "backup_migrate_ui_manual_quick_backup_form":
      //TODO: write test for this alter
      if (array_key_exists('PANTHEON_SITE_NAME', $_ENV)) {
        // Prevent saving backups to Pantheon servers
        $form['quickbackup']['destination_id']['#options'] = array('download' => 'Download');
        $form['quickbackup']['pantheon'] = array(
          '#type' => 'markup',
          '#markup' => $pantheon_description,
        );
      }
      break;
    case "backup_migrate_ui_manual_backup_form":
      //TODO: write test for this alter
      if (array_key_exists('PANTHEON_SITE_NAME', $_ENV)) {
        // Prevent saving backups to Pantheon servers
        $form['destination']['destination_id']['#options'] = array('download' => 'Download');
        $form['destination']['pantheon'] = array(
          '#type' => 'markup',
          '#markup' => $pantheon_description,
        );
      }
      break;
  }
}

function openberkeley_admin_block_info() {
  $blocks['openberkeley_create_content']['info'] = t('Open Berkeley: Create Content');
  $blocks['openberkeley_content_overview']['info'] = t('Open Berkeley: Content Overview');
  $blocks['url_administration']['info'] = t('URL Administration');
  $blocks['other_administration']['info'] = t('Other Administration');
  $blocks['backups']['info'] = t('Backups');

  return $blocks;
}

function openberkeley_admin_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'openberkeley_create_content':
      $block['subject'] = t('Create Content');
      $block['content'] = openberkeley_admin_block_create_content_content();
      break;
    case 'openberkeley_content_overview':
      $block['subject'] = t('Content Overview');
      $block['content'] = openberkeley_admin_block_content_overview_content();
      break;
    case 'other_administration':
      $block['subject'] = t('Other Administration');
      $block['content'] = openberkeley_admin_block_other_administration_content();
      break;
    case 'url_administration':
      $block['subject'] = t('URL Administration');
      $block['content'] = openberkeley_admin_block_url_administration_content();
      break;
    case 'backups':
      $block['subject'] = t('Backups');
      $block['content'] = openberkeley_admin_block_backups_content();
      break;
  }

  return $block;
}

function openberkeley_admin_block_create_content_content() {
  include 'openberkeley_admin.admin.inc';
  return openberkeley_admin_node_add_page();
}

/**
 * Customizaton of total_control_get_content_overview
 *
 * @see total_control.inc
 * @param array $conf
 * @return string
 */
function openberkeley_admin_block_content_overview_content() {
  $conf = array('types' => array());
  $items = array();
  $types = node_type_get_types();
  $comments_exist = module_exists('comment');
  $link_path = 'admin/dashboard/content';
  $highlight_types = array('openberkeley_content_page', 'openberkeley_landing_page');

  foreach ($types as $type => $object) {
    // Compare against type option on pane config.
    if ((!array_key_exists($type, $conf['types'])) || (isset($conf['types']) && $conf['types'][$type] == $type)) {
      $type_count = db_query("SELECT count(*) FROM {node} WHERE type = :type and status = 1", array(':type' => $type))->fetchField();
      $content_data[$type] = format_plural($type_count, '1 ' . $object->name . ' item', '@count ' . $object->name . ' items');

      // Check if comments module is enabled.
      if ($comments_exist) {

        // Compare against comment options on pane config.
        if (array_key_exists($type, $conf['comments']) && $conf['comments'][$type] === $type) {
          $comment_count = db_query("SELECT count(DISTINCT cid) FROM {comment} c INNER JOIN {node} n ON c.nid = n.nid WHERE n.type = :type and c.status = 1 AND n.status = 1", array(':type' => $type))->fetchField();
          $content_data[$type . '_comments'] = format_plural($comment_count, '1 comment', '@count comments');

          // Compare against spam option checkbox on pane config.
          if (isset($conf['spam']) && $conf['spam'] == 1) {
            $spam_count = db_query("SELECT count(DISTINCT c.cid) FROM {comment} c INNER JOIN {node} n ON c.nid = n.nid WHERE n.type = :type and c.status = 0 AND n.status = 1", array(':type' => $type))->fetchField();
            $content_data[$type . '_comments_spam'] = format_plural($spam_count, '1 spam', '@count spam');
          }
        }
      }

      $line = array($object->name, $type_count, l("See all", $link_path, array('query' => array('type' => $object->type))));
      //TODO: fix the below if we want comments data
      //$line .= (isset($content_data[$type . '_comments']))? ' with ' . $content_data[$type . '_comments'] : '' ;
      //$line .= (isset($content_data[$type . '_comments_spam']))? ' (' . $content_data[$type . '_comments_spam'] . ')' : '' ;
      if (in_array($object->type, $highlight_types)) {
        $highlights[] = $line;
      }
      else {
        $normals[] = $line;
      }
    }
  }
  $items = array_merge($highlights, $normals);
  return theme('total_control_admin_table', array('header' => array('Type', 'Number', 'Operations'), 'rows' => $items, 'link' => l('Administer Content', $link_path, array('query' => array('type' => 'All')))));

}

function openberkeley_admin_block_url_administration_content() {
  $content = '<ul>';
  if (module_exists('pathauto')) {
    $content .= '<li>' . l("Administer URL Aliases", "admin/config/search/path") . '</li>';
  }
  if (module_exists('redirect')) {
    $content .= '<li>' . l("Administer URL Redirects", "admin/config/search/redirect") . '</li>';
  }
  $content .= '</ul>';
  return $content;
}

function openberkeley_admin_block_other_administration_content() {
  global $theme;

  $content = '<ul>';
  $content .= '<li>' . l(ucfirst($theme) . " Theme Settings", "admin/appearance/settings/$theme", array('query' => array('destination' => 'admin/dashboard'))) . '</li>';
  $content .= '<li>' . l("Edit Site Information", "admin/config/system/site-information", array('query' => array('destination' => 'admin/dashboard'))) . '</li>';
  // Fetch a list of regions for the current theme.
  // $all_regions = system_region_list($theme);
  $footer_regions = array(
    'footer_first',
    'footer_second',
    'footer_third',
    'footer_fourth',
  );
  $blocks_footer = array();
  //foreach (array_keys($all_regions) as $region) { //looping over this in this context will loop infinitely
  foreach ($footer_regions as $region) {
    $blocks_footer[] = block_list($region);
  }
  foreach ($blocks_footer as $bf) {
    foreach ($bf as $bf_block) {
      $delta = $bf_block->delta;
      $subject = $bf_block->subject;
      $content .= '<li>' . l("Edit Footer: $subject", "admin/structure/block/manage/block/$delta/configure", array('query' => array('destination' => 'admin/dashboard'))) . '</li>';
    }
  }
  $content .= '</ul>';

  return $content;
}

function openberkeley_admin_block_backups_content() {
  $content = '<ul>';
  if (module_exists('backup_migrate')) {
    $content .= '<li>' . l("Create Backups", "admin/config/system/backup_migrate") . '</li>';
    $content .= '<li>' . l("Restore Backups", "admin/config/system/backup_migrate/restore") . '</li>';
  }
  $content .= '</ul>';
  return $content;
}


/**
 * Implements hook_views_api().
 */
function openberkeley_admin_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_views_default_views_alter()
 *
 * Alter the views that appear at admin/dashboard:
 * - use custom permissions for access to tabs
 * - Add admin_views_files to Files tab
 * - Add admin_views_content to Content tab
 */
function openberkeley_admin_views_default_views_alter(&$views) {
  // Modify Total Control's control_users view
  if (array_key_exists('control_users', $views)) {
    $handler =& $views['control_users']->display['default']->handler;
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['access']['perm'] = 'access dashboard user accounts tab';
    $handler->display->display_options['fields']['login']['custom_date_format'] = 'm/d g:ia';
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'] = array(
      'action::user_block_user_action' => array(
        'selected' => 1,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
      'action::views_bulk_operations_delete_item' => array(
        'selected' => 0,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
      'action::views_bulk_operations_script_action' => array(
        'selected' => 0,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
      'action::views_bulk_operations_modify_action' => array(
        'selected' => 0,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'settings' => array(
          'show_all_tokens' => 1,
          'display_values' => array(
            '_all_' => '_all_',
          ),
        ),
      ),
      'action::views_bulk_operations_user_roles_action' => array(
        'selected' => 1,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
      'action::views_bulk_operations_argument_selector_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'settings' => array(
          'url' => '',
        ),
      ),
      'action::system_send_email_action' => array(
        'selected' => 1,
        'postpone_processing' => 0,
        'skip_confirmation' => 1,
        'override_label' => 0,
        'label' => '',
      ),
      'action::panelizer_set_status_action' => array(
        'selected' => 0,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
      'action::pathauto_user_update_action' => array(
        'selected' => 0,
        'postpone_processing' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
      ),
    );
  }


  // Modify file_entity/admin_views_default's admin_views_file view
  if (array_key_exists('admin_views_file', $views)) {
    $view =& $views['admin_views_file'];
    $handler =& $view->new_display('page', 'Page', 'page_1');
    $handler->display->display_options['defaults']['access'] = FALSE;
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['access']['perm'] = 'access dashboard files tab';
    $handler->display->display_options['path'] = 'admin/dashboard/files';
    $handler->display->display_options['menu']['type'] = 'tab';
    $handler->display->display_options['menu']['title'] = 'Files';
    $handler->display->display_options['menu']['description'] = 'Manage files';
    $handler->display->display_options['menu']['weight'] = '-15';
    $handler->display->display_options['menu']['name'] = 'management';
    $handler->display->display_options['menu']['context'] = 0;
    $handler->display->display_options['menu']['context_only_inline'] = 0;
  }

  // Disable control_content (use admin_views_node instead)
  if (array_key_exists('control_content', $views)) {
    $views['control_content']->disabled = TRUE; /* Edit this to true to make a default view disabled initially */
  }

  // Modify file_entity/admin_views_default's admin_views_node view
  if (array_key_exists('admin_views_node', $views)) {
    $handler =& $views['admin_views_node']->new_display('page', 'Page', 'page_1');
    $handler->display->display_options['defaults']['access'] = FALSE;
    $handler->display->display_options['defaults']['title'] = FALSE;
    $handler->display->display_options['title'] = 'All Content';
    $handler->display->display_options['path'] = 'admin/dashboard/content/all';
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['access']['perm'] = 'access dashboard content tab';
    $handler->display->display_options['menu']['type'] = 'default tab';
    $handler->display->display_options['menu']['title'] = 'All Content';
    $handler->display->display_options['menu']['weight'] = '-19';
    $handler->display->display_options['menu']['name'] = 'management';
    $handler->display->display_options['tab_options']['type'] = 'tab';
    $handler->display->display_options['tab_options']['title'] = 'Content';
    $handler->display->display_options['tab_options']['weight'] = '-19';
    $handler->display->display_options['tab_options']['name'] = 'management';
    /* Add sortable Created column and change date format for Updated column  */
    $handler->display->display_options['defaults']['style_plugin'] = FALSE;
    $handler->display->display_options['style_plugin'] = 'table';
    $handler->display->display_options['style_options']['columns'] = array(
      'views_bulk_operations' => 'views_bulk_operations',
      'title' => 'title',
      'timestamp' => 'title',
      'type' => 'type',
      'name' => 'name',
      'status' => 'status',
      'created' => 'created',
      'changed' => 'changed',
      'edit_node' => 'edit_node',
      'delete_node' => 'edit_node',
    );
    $handler->display->display_options['style_options']['default'] = 'changed';
    $handler->display->display_options['style_options']['info'] = array(
      'views_bulk_operations' => array(
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'title' => array(
        'sortable' => 1,
        'default_sort_order' => 'asc',
        'align' => '',
        'separator' => '&nbsp;',
        'empty_column' => 0,
      ),
      'timestamp' => array(
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'type' => array(
        'sortable' => 1,
        'default_sort_order' => 'asc',
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'name' => array(
        'sortable' => 1,
        'default_sort_order' => 'asc',
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'status' => array(
        'sortable' => 1,
        'default_sort_order' => 'desc',
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'created' => array(
        'sortable' => 1,
        'default_sort_order' => 'asc',
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'changed' => array(
        'sortable' => 1,
        'default_sort_order' => 'desc',
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
      'edit_node' => array(
        'align' => '',
        'separator' => '&emsp;',
        'empty_column' => 0,
      ),
      'delete_node' => array(
        'align' => '',
        'separator' => '',
        'empty_column' => 0,
      ),
    );
    $handler->display->display_options['style_options']['sticky'] = TRUE;
    $handler->display->display_options['style_options']['empty_table'] = TRUE;
    $handler->display->display_options['defaults']['style_options'] = FALSE;
    $handler->display->display_options['defaults']['row_plugin'] = FALSE;
    $handler->display->display_options['defaults']['row_options'] = FALSE;
    $handler->display->display_options['defaults']['fields'] = FALSE;
    /* Field: Bulk operations: Content */
    $handler->display->display_options['fields']['views_bulk_operations']['id'] = 'views_bulk_operations';
    $handler->display->display_options['fields']['views_bulk_operations']['table'] = 'node';
    $handler->display->display_options['fields']['views_bulk_operations']['field'] = 'views_bulk_operations';
    $handler->display->display_options['fields']['views_bulk_operations']['label'] = '';
    $handler->display->display_options['fields']['views_bulk_operations']['element_label_colon'] = FALSE;
    $handler->display->display_options['fields']['views_bulk_operations']['hide_alter_empty'] = FALSE;
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['display_type'] = '0';
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['enable_select_all_pages'] = 1;
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['force_single'] = 0;
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['entity_load_capacity'] = '10';
    $handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'] = array(
      'action::node_assign_owner_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Change author',
        'postpone_processing' => 0,
      ),
      'action::views_bulk_operations_delete_item' => array(
        'selected' => 1,
        'skip_confirmation' => 0,
        'override_label' => 1,
        'label' => 'Delete',
        'postpone_processing' => 0,
      ),
      'action::views_bulk_operations_modify_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Change value',
        'settings' => array(
          'show_all_tokens' => 1,
          'display_values' => array(
            '_all_' => '_all_',
          ),
        ),
        'postpone_processing' => 0,
      ),
      'action::system_message_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
      'action::views_bulk_operations_script_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
      'action::node_make_sticky_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Stick',
        'postpone_processing' => 0,
      ),
      'action::node_make_unsticky_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Unstick',
        'postpone_processing' => 0,
      ),
      'action::views_bulk_operations_argument_selector_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'settings' => array(
          'url' => '',
        ),
      ),
      'action::node_promote_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Promote to front page',
        'postpone_processing' => 0,
      ),
      'action::node_publish_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Publish',
        'postpone_processing' => 0,
      ),
      'action::system_goto_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
      'action::node_unpromote_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Demote from front page',
        'postpone_processing' => 0,
      ),
      'action::node_save_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
      'action::system_send_email_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
      'action::node_unpublish_action' => array(
        'selected' => 1,
        'skip_confirmation' => 1,
        'override_label' => 1,
        'label' => 'Unpublish',
        'postpone_processing' => 0,
      ),
      'action::node_unpublish_by_keyword_action' => array(
        'selected' => 0,
        'skip_confirmation' => 0,
        'override_label' => 0,
        'label' => '',
        'postpone_processing' => 0,
      ),
    );
    /* Field: Content: Title */
    $handler->display->display_options['fields']['title']['id'] = 'title';
    $handler->display->display_options['fields']['title']['table'] = 'node';
    $handler->display->display_options['fields']['title']['field'] = 'title';
    /* Field: Content: Has new content */
    $handler->display->display_options['fields']['timestamp']['id'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['table'] = 'history';
    $handler->display->display_options['fields']['timestamp']['field'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['label'] = '';
    $handler->display->display_options['fields']['timestamp']['element_label_colon'] = FALSE;
    /* Field: Content: Type */
    $handler->display->display_options['fields']['type']['id'] = 'type';
    $handler->display->display_options['fields']['type']['table'] = 'node';
    $handler->display->display_options['fields']['type']['field'] = 'type';
    /* Field: User: Name */
    $handler->display->display_options['fields']['name']['id'] = 'name';
    $handler->display->display_options['fields']['name']['table'] = 'users';
    $handler->display->display_options['fields']['name']['field'] = 'name';
    $handler->display->display_options['fields']['name']['relationship'] = 'uid';
    $handler->display->display_options['fields']['name']['label'] = 'Author';
    $handler->display->display_options['fields']['name']['hide_alter_empty'] = FALSE;
    /* Field: Content: Published */
    $handler->display->display_options['fields']['status']['id'] = 'status';
    $handler->display->display_options['fields']['status']['table'] = 'node';
    $handler->display->display_options['fields']['status']['field'] = 'status';
    $handler->display->display_options['fields']['status']['not'] = 0;
    /* Field: Content: Post date */
    $handler->display->display_options['fields']['created']['id'] = 'created';
    $handler->display->display_options['fields']['created']['table'] = 'node';
    $handler->display->display_options['fields']['created']['field'] = 'created';
    $handler->display->display_options['fields']['created']['label'] = 'Created';
    $handler->display->display_options['fields']['created']['date_format'] = 'custom';
    $handler->display->display_options['fields']['created']['custom_date_format'] = 'm/d/y g:i a';
    $handler->display->display_options['fields']['created']['second_date_format'] = 'panopoly_time';
    /* Field: Content: Updated date */
    $handler->display->display_options['fields']['changed']['id'] = 'changed';
    $handler->display->display_options['fields']['changed']['table'] = 'node';
    $handler->display->display_options['fields']['changed']['field'] = 'changed';
    $handler->display->display_options['fields']['changed']['label'] = 'Updated';
    $handler->display->display_options['fields']['changed']['date_format'] = 'custom';
    $handler->display->display_options['fields']['changed']['custom_date_format'] = 'm/d/y g:i a';
    $handler->display->display_options['fields']['changed']['second_date_format'] = 'panopoly_time';
    /* Field: Content: Edit link */
    $handler->display->display_options['fields']['edit_node']['id'] = 'edit_node';
    $handler->display->display_options['fields']['edit_node']['table'] = 'views_entity_node';
    $handler->display->display_options['fields']['edit_node']['field'] = 'edit_node';
    $handler->display->display_options['fields']['edit_node']['label'] = 'Operations';
    /* Field: Content: Delete link */
    $handler->display->display_options['fields']['delete_node']['id'] = 'delete_node';
    $handler->display->display_options['fields']['delete_node']['table'] = 'views_entity_node';
    $handler->display->display_options['fields']['delete_node']['field'] = 'delete_node';
    $handler->display->display_options['fields']['delete_node']['label'] = '';
  }

  // Modify permission granting access to control_terms
  if (array_key_exists('control_terms', $views)) {
    $handler =& $views['control_terms']->display['default']->handler;
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['access']['perm'] = 'access dashboard categories tab';
  }

}
